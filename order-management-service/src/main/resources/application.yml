spring:
  application:
    name: order-management-service
  datasource:
    url: jdbc:postgresql://postgres:5432/orderdb
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    defer-datasource-initialization: true
  sql:
    init:
      mode: always
      continue-on-error: true
  kafka:
    bootstrap-servers: kafka:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: order-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.vps.ordermanagement.dto,com.vps.ordermanagement.event
    listener:
      ack-mode: MANUAL_IMMEDIATE
      concurrency: 3
      retry:
        enabled: true
        max-attempts: 3
    template:
      default-topic: orders

server:
  port: 8080

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method

kafka:
  topics:
    orders: order-events
    orders-retry: order-events-retry
    orders-dead: order-events-dead
